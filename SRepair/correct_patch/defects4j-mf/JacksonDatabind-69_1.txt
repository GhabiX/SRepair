
1:
public void addDelegatingCreator(AnnotatedWithParams creator, boolean explicit, SettableBeanProperty[] injectables) {
    if (creator.getParameterType(0).isCollectionLikeType()) {
        if (verifyNonDup(creator, C_ARRAY_DELEGATE, explicit)) {
            _arrayDelegateArgs = injectables;
        }
    } else {
        if (verifyNonDup(creator, C_DELEGATE, explicit)) {
            _delegateArgs = injectables;
        }
    }
}
2:
public void addPropertyCreator(AnnotatedWithParams creator, boolean explicit, SettableBeanProperty[] properties) {
    if (verifyNonDup(creator, C_PROPS, explicit)) {
        // Better ensure we have no duplicate names either...
        if (properties.length > 1) {
            HashMap<String,Integer> names = new HashMap<String,Integer>();
            for (int i = 0, len = properties.length; i < len; ++i) {
                String name = properties[i].getName();
                // [Issue-13]: Need to consider Injectables, which may not have
                //   a name at all, and need to be skipped
                if (name.length() == 0 && properties[i].getInjectableValueId() != null) {
                    continue;
                }
                Integer old = names.put(name, Integer.valueOf(i));
                if (old != null) {
                    throw new IllegalArgumentException("Duplicate creator property \""+name+"\" (index "+old+" vs "+i+")");
                }
            }
        }
        _propertyBasedArgs = properties;
    }
}
3:
protected boolean verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit) {
    final int mask = (1 << typeIndex);
    _hasNonDefaultCreator = true;
    AnnotatedWithParams oldOne = _creators[typeIndex];
    // already had an explicitly marked one?
    if (oldOne != null) {
        boolean verify;
        if ((_explicitCreators & mask) != 0) { // already had explicitly annotated, leave as-is
            // but skip, if new one not annotated
            if (!explicit) {
                return false;
            }
            // both explicit: verify
            verify = true;
        } else {
            // otherwise only verify if neither explicitly annotated.
            verify = !explicit;
        }

        // one more thing: ok to override in sub-class
        if (verify && (oldOne.getClass() == newOne.getClass())) {
            // [databind#667]: avoid one particular class of bogus problems
            Class<?> oldType = oldOne.getRawParameterType(0);
            Class<?> newType = newOne.getRawParameterType(0);

            if (oldType == newType) {
                throw new IllegalArgumentException("Conflicting "+TYPE_DESCS[typeIndex]
                        +" creators: already had explicitly marked "+oldOne+", encountered "+newOne);
            }
            // otherwise, which one to choose?
            if (newType.isAssignableFrom(oldType)) {
                // new type more generic, use old
                return false;
            }
            // new type more specific, use it
        }
    }
    if (explicit) {
        _explicitCreators |= mask;
    }
    _creators[typeIndex] = _fixAccess(newOne);
    return true;
}