protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) {
    List tokens = new ArrayList();

    boolean eatTheRest = false;

    for (int i = 0; i < arguments.length; i++) {
        String arg = arguments[i];

        if ("--".equals(arg)) {
            eatTheRest = true;
            tokens.add("--");
        } else if ("-".equals(arg)) {
            tokens.add("-");
        } else if (arg.startsWith("-")) {
            String opt = Util.stripLeadingHyphens(arg);
            if (options.hasOption(opt)) {
                tokens.add(arg);
            } else if (parseSpecialOption(arg, tokens, options)) {
                // The option was parsed correctly
            } else if (options.hasOption(arg.substring(0, 2))) {
                // The format is --foo=value or -foo=value
                tokens.add(arg.substring(0, 2)); // -D
                tokens.add(arg.substring(2)); // property=value
            } else {
                eatTheRest = stopAtNonOption;
                tokens.add(arg);
            }
        } else {
            tokens.add(arg);
        }

        if (eatTheRest) {
            for (i++; i < arguments.length; i++) {
                tokens.add(arguments[i]);
            }
        }
    }

    return (String[]) tokens.toArray(new String[tokens.size()]);
}

private boolean parseSpecialOption(String arg, List tokens, Options options) {
    if (arg.contains("=")) {
        String[] parts = arg.split("=");
        if (options.hasOption(parts[0])) {
            tokens.add(parts[0]);
            tokens.add(parts[1]);
            return true;
        }
    }
    return false;
}