--- 
+++ 
@@ -11,47 +11,36 @@
  */
 public class LCS_LENGTH {
     public static Integer lcs_length(String s, String t) {
-        // make a Counter
-        // pair? no! just hashtable to a hashtable.. woo.. currying
-
+        if (s.isEmpty() || t.isEmpty()) {
+            return 0;
+        }
         Map<Integer, Map<Integer,Integer>> dp = new HashMap<Integer,Map<Integer,Integer>>();
 
-        // just set all the internal maps to 0
         for (int i=0; i < s.length(); i++) {
-            Map<Integer,Integer> initialize = new HashMap<Integer,Integer>();
-            dp.put(i, initialize);
+            dp.put(i, new HashMap<Integer,Integer>());
             for (int j=0; j < t.length(); j++) {
-                Map<Integer,Integer> internal_map = dp.get(i);
-                internal_map.put(j,0);
-                dp.put(i, internal_map);
+                dp.get(i).put(j,0);
             }
         }
 
-        // now the actual code
         for (int i=0; i < s.length(); i++) {
             for (int j=0; j < t.length(); j++) {
                 if (s.charAt(i) == t.charAt(j)) {
-
-                    if (dp.containsKey(i-1)) {
-                        Map<Integer, Integer> internal_map = dp.get(i);
-                        int insert_value = dp.get(i-1).get(j) + 1;
-                        internal_map.put(j, insert_value);
-                        dp.put(i,internal_map);
+                    if (i>0 && j>0) {
+                        dp.get(i).put(j, dp.get(i-1).get(j-1) + 1);
                     } else {
-                        Map<Integer, Integer> internal_map = dp.get(i);
-                        internal_map.put(j,1);
-                        dp.put(i,internal_map);
+                        dp.get(i).put(j,1);
                     }
                 }
             }
         }
 
         if (!dp.isEmpty()) {
-            List<Integer> ret_list = new ArrayList<Integer>();
+            int max = 0;
             for (int i=0; i<s.length(); i++) {
-                ret_list.add(!dp.get(i).isEmpty() ? Collections.max(dp.get(i).values()) : 0);
+                max = Math.max(max, Collections.max(dp.get(i).values()));
             }
-            return Collections.max(ret_list);
+            return max;
         } else {
             return 0;
         }